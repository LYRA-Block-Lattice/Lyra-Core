syntax = "proto3";

option csharp_namespace = "Lyra.Core.Protos";

package Lyra;

service LyraApi {
  rpc GetVersion (GetVersionRequest) returns (GetVersionReply);
  rpc GetSyncHeight (SyncHeightRequest) returns (AccountHeightReply);
  rpc GetTokenNames (GetTokenNamesRequest) returns (GetTokenNamesReply);
  rpc GetAccountHeight (GetAccountHeightRequest) returns (GetAccountHeightReply);
  rpc GetBlockByIndex (GetBlockByIndexRequest) returns (GetBlockReply);
  rpc GetBlockByHash (GetBlockByHashRequest) returns (GetBlockReply);
  rpc GetNonFungibleTokens (GetNonFungibleTokensRequest) returns (GetNonFungibleTokensReply);
  rpc GetTokenGenesisBlock (GetTokenGenesisBlockRequest) returns (GetBlockReply);
  rpc GetLastServiceBlock (GetLastServiceBlockRequest) returns (GetBlockReply);
  rpc LookForNewTransfer (LookForNewTransferRequest) returns (LookForNewTransferReply);
  rpc OpenAccountWithGenesis (OpenAccountWithGenesisRequest) returns (AuthorizationsReply);
  rpc ReceiveTransferAndOpenAccount (ReceiveTransferAndOpenAccountRequest) returns (AuthorizationsReply);
  rpc OpenAccountWithImport (OpenAccountWithImportRequest) returns (AuthorizationsReply);
  rpc SendTransfer (SendTransferRequest) returns (AuthorizationsReply);
  rpc ReceiveTransfer (ReceiveTransferRequest) returns (AuthorizationsReply);
  rpc ImportAccount (ImportAccountRequest) returns (AuthorizationsReply);
  rpc CreateToken (CreateTokenRequest) returns (AuthorizationsReply);
  rpc SubmitExchangeOrder (SubmitExchangeOrderRequest) returns (SubmitExchangeOrderReply);
  rpc RequestMarket (RequestMarketRequest) returns (SimpleAPIReply);
  rpc CustomizeNotifySettings (CustomizeNotifySettingsRequest) returns (CustomizeNotifySettingsReply);
}

message GetVersionRequest
{
	int32 ApiVersion = 1;
	string AppName = 2;
	string Appversion = 3;
}

message GetVersionReply
{
	APIResultCodes ResultCode = 1;
	int32 ApiVersion = 2;
	string NodeVersion = 3;
	bool UpgradeNeeded = 4;
	bool MustUpgradeToConnect = 5;
}

// GetSyncHeight
message SyncHeightRequest {
  
}

message AccountHeightReply {
	APIResultCodes ResultCode = 1;
	int32 Height = 2;
	string SyncHash = 3;
	string NetworkId = 4;
}

// GetTokenNames
message GetTokenNamesRequest
{
	string AccountId = 1;
	string Signature = 2;
	string Keyword = 3;
}

message GetTokenNamesReply
{
	APIResultCodes ResultCode = 1;
	repeated string TokenNames = 2;
}

// GetAccountHeight
message GetAccountHeightRequest
{
	string AccountId = 1;
	string Signature = 2;
}

message GetAccountHeightReply
{
	APIResultCodes ResultCode = 1;
	int32 Height = 2;
	string NetworkId = 3;
	string SyncHash = 4;
}

// GetBlockByIndex
message GetBlockByIndexRequest
{
	string AccountId = 1;
	string Signature = 2;
	int32 Index = 3;
}

message GetBlockReply
{
	APIResultCodes ResultCode = 1;
	BlockTypes ResultBlockType = 2;
	string BlockData = 3;	
}

// GetBlockByHash
message GetBlockByHashRequest
{
	string AccountId = 1;
	string Signature = 2;
	string Hash = 3;
}

// GetNonFungibleTokens
message GetNonFungibleTokensRequest
{
	string AccountId = 1;
	string Signature = 2;
}

message GetNonFungibleTokensReply
{
	APIResultCodes ResultCode = 1;
	string ListDataSerialized = 2;
}

// GetTokenGenesisBlock
message GetTokenGenesisBlockRequest
{
	string AccountId = 1;
	string Signature = 2;
	string TokenTicker = 3;
}

// GetLastServiceBlock
message GetLastServiceBlockRequest
{
	string AccountId = 1;
	string Signature = 2;
}

// LookForNewTransfer
message LookForNewTransferRequest
{
	string AccountId = 1;
	string Signature = 2;
}

message LookForNewTransferReply
{
	APIResultCodes ResultCode = 1;
	string TransferJson = 2;
	string SourceHash = 3;
	string NonFungibleTokenJson = 4;
}

// OpenAccountWithGenesis
message OpenAccountWithGenesisRequest
{
	string OpenTokenGenesisBlockJson = 1;
}

message AuthorizationsReply
{
	APIResultCodes ResultCode = 1;
	string ServiceHash = 2;
	string AuthorizationsJson = 3; 
}

// ReceiveTransferAndOpenAccount
message ReceiveTransferAndOpenAccountRequest
{
	string OpenReceiveBlockJson = 1;
}

// OpenAccountWithImport
message OpenAccountWithImportRequest
{
	string BlockJson = 1;
}

// SendTransfer
message SendTransferRequest
{
	string SendBlockJson = 1;
}

// ReceiveTransfer
message ReceiveTransferRequest
{
	string ReceiveBlockJson = 1;
}

// ImportAccount
message ImportAccountRequest
{
	string ImportBlockJson = 1;
}

// CreateToken
message CreateTokenRequest
{
	string CreateTokenJson = 1;
}

// SubmitExchangeOrder(TokenTradeOrder order)
message SubmitExchangeOrderRequest
{
	string TokenTradeOrderJson = 1;
}

message SubmitExchangeOrderReply
{
	APIResultCodes ResultCode = 1;
	string CancelKeyJson = 2;
}

// RequestMarket
message RequestMarketRequest
{
	string TokenNames = 1;
}

message SimpleAPIReply
{
	APIResultCodes ResultCode = 1;
}

message CustomizeNotifySettingsRequest
{
	string settingsJson = 1;
}

message CustomizeNotifySettingsReply
{
	APIResultCodes ResultCode = 1;
}

// shared
	enum BlockTypes 
	{
	        Null = 0;

        // Network service blocks

        ServiceGenesis = 10;

        Service = 11;
               
        Sync = 12;

        // Opening blocks

        // This is the very first block that creates Lyra Gas token on primary shard
        LyraTokenGenesis = 20;

        // account opening block where the first transaction is receive transfer
        OpenAccountWithReceiveTransfer =21;

        // the same as OpenWithReceiveTransfer Block but tells the authorizer that it received fee instead of regular transfer
        OpenAccountWithReceiveFee = 22;

        // Open a new account and import another account
        OpenAccountWithImport = 23;

        // Transaction blocks

        TokenGenesis = 30;

        SendTransfer = 31;
    
        ReceiveTransfer = 32;
        
        // adds tarnsfers' fee to authorizer's account; 
        // the fee is settled when a new sync or service block is generated, for the previous service Index, 
        // by summarizing all the fee amounts from all blocks with the same corresponding sefrviceblock hash and dividing it by the number of authorizers in the sample;
        // the block can be validated by the next sample and all other nores in the same way;
        // fee data is not encrypted 
        ReceiveFee = 33;

        // Imports an account into current account
        ImportAccount = 34;

        // Trading blocks

        // Put Sell or Buy trade order to exchange tokens
        TradeOrder = 40;

        // Send tokens to the trade order to initiate trade
        Trade = 41;

        // Exchange tokens with Trade initiator to conclude the trade and execute the trade order
        ExecuteTradeOrder = 42;

        // Cancels the order and frees up the locked funds
        CancelTradeOrder = 43;
	}

  enum APIResultCodes {
        Success = 0;
        UnknownError = 1;
        // default error code
        UndefinedError = 1000;
        BlockWithThisIndexAlreadyExists = 2;
        AccountAlreadyExists = 3;
        AccountDoesNotExist = 4;
        BlockWithThisPreviousHashAlreadyExists = 5; // double-spending attempt - trying to add another block to the same previous block
        BlockValidationFailed = 6;
        TokenGenesisBlockAlreadyExists = 7;
        CouldNotFindLatestBlock = 8;
        NegativeTransactionAmount = 9;
        AccountChainBlockValidationFailed = 10;
        AccountChainSignatureValidationFailed = 11;
        AccountChainBalanceValidationFailed = 12;
        AccountBlockAlreadyExists = 13;
        SourceSendBlockNotFound = 14;
        InvalidDestinationAccountId = 15;
        CouldNotTraceSendBlockChain = 16;
        TransactionAmountDoesNotMatch = 17;
        ExceptionInOpenAccountWithGenesis = 18;
        ExceptionInSendTransfer = 19;
        ExceptionInReceiveTransferAndOpenAccount = 20;
        ExceptionInReceiveTransfer = 21;
        InvalidBlockType = 22;
        ExceptionInCreateToken = 23;
        InvalidFeeAmount = 24;
        InvalidNewAccountBalance = 25;
        SendTransactionValidationFailed = 26;
        ReceiveTransactionValidationFailed = 27;
        TransactionTokenDoesNotMatch = 28;
        BlockSignatureValidationFailed = 29;
        NoNewTransferFound = 30;
        TokenGenesisBlockNotFound = 31;
        ServiceBlockNotFound = 32;
        BlockNotFound = 33;
        NoRPCServerConnection = 34;
        ExceptionInNodeAPI = 35;
        ExceptionInWebAPI = 36;
        PreviousBlockNotFound = 37;
        InsufficientFunds = 38;
        InvalidAccountId = 39;
        InvalidPrivateKey = 40;
        TradeOrderMatchFound = 41;
        InvalidIndexSequence = 42;
        FeatureIsNotSupported = 48;

        // Trade Codes

        ExceptionInTradeOrderAuthorizer = 43;
        ExceptionInTradeAuthorizer = 44;
        ExceptionInExecuteTradeOrderAuthorizer = 45;
        ExceptionInCancelTradeOrderAuthorizer = 46;

        TradeOrderValidationFailed = 47;
        NoTradesFound = 49;
        TradeOrderNotFound = 50;
        InvalidTradeAmount = 51;

        // Non-fungible token codes
        InvalidNonFungibleAmount = 52;
        InvalidNonFungibleTokenCode = 53;
        MissingNonFungibleToken = 54;
        InvalidNonFungibleSenderAccountId = 55;
        NoNonFungibleTokensFound = 56;
        OriginNonFungibleBlockNotFound = 57;
        SourceNonFungibleBlockNotFound = 58;
        OriginNonFungibleBlockHashDoesNotMatch = 59;
        SourceNonFungibleBlockHashDoesNotMatch = 60;
        NonFungibleSignatureVerificationFailed = 61;
        InvalidNonFungiblePublicKey = 62;

        CancelTradeOrderValidationFailed = 63;

        InvalidFeeType = 64;

        InvalidParameterFormat = 65;

        APISignatureValidationFailed = 66;

        InvalidNetworkId = 67;

        DuplicateReceiveBlock = 100;

        InvalidTokenRenewalDate =  200;

        TokenExpired = 201;

        NameUnavailable = 202;
  }