@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@page "/webwallet"
@using Nebula.Store.WebWalletUseCase
@using Nebula.Data
@using Microsoft.Extensions.Configuration
@using Blazored.LocalStorage;
@inject IConfiguration Configuration
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject SampleAPI SampleAPI
@inject Blazored.LocalStorage.ILocalStorageService localStore

<h1>Web Wallet for @LyraGlobal.PRODUCTNAME</h1>
<hr />
@if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.Main)
{
   <div><span>
    <button class="btn btn-primary" @onclick="Send">
        Send
    </button>
    <button class="btn btn-primary" @onclick="Refresh">
        Receive
    </button>
    <button class="btn btn-primary" @onclick="Transactions">
        Transactions
    </button>
    <button class="btn btn-primary" @onclick="Settings">
        Settings
    </button>
    &nbsp;
    <button class="btn btn-primary" @onclick="CloseWallet">
        Close
    </button></span>
    &nbsp;&nbsp;&nbsp;
    @if(Configuration["network"] != "mainnet" && walletState.Value.wallet.MainBalance == 0m && walletState.Value.freeTokenTimes < 3 && !walletState.Value.freeTokenSent)
    {
    <span><button style="float: right;" class="btn btn-extra" @onclick="FreeToken">
        Get Free Token
    </button></span>
    }
    </div>
    <hr />
    <div>
        <p>Your wallet's private key is: @walletState.Value.wallet.PrivateKey</p>
        <p>Your wallet's address is: <a href="/showblock/@walletState.Value.wallet.AccountId">@walletState.Value.wallet.AccountId</a></p>
        <p>Your wallet's balance is: @walletState.Value.balanceString</p>
        <p>Your are now voting for: @walletState.Value.wallet.VoteFor</p>
    </div>
    <div>
        <p style="color: red">Please save private key properly if you want to open this wallet again.</p>
    </div>
}
else if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.Settings)
{
    <h3>Settings</h3>
    <hr />
        <div>
        <p>Vote For Address:
        <input size="100" type="text" @bind="@voteAddr" /></p>
        <hr />
        <button class="btn btn-primary" @onclick="SaveSettings">Save</button>
        <button class="btn btn-primary" @onclick="CancelSave">Cancel</button>
    </div>
}
else if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.Send)
{
    <h3>Sending token</h3>
    <hr />
    <div>
        <p>Destination Wallet Address:<br />
        <input size="100" type="text" @bind="@dstAddr" /></p>
        <p>Token Name:<br />
        <input size="20" type="text" @bind="@tokenName" /></p>
        <p>Amount:<br />
        <input size="20" type="text" @bind="@amount" /></p>
        <hr />
        <button class="btn btn-primary" @onclick="SendToken">Send Token</button>
        <button class="btn btn-primary" @onclick="CancelSend">Cancel</button>
    </div>

}
else if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.Transactions)
{
    <h3>Transactions</h3>
    <hr />
    <div>
        <button class="btn btn-primary" @onclick="Return">Return</button>
    </div>
    @if(walletState.Value.txs != null)
    {
        <pre>
        @foreach(var tx in walletState.Value.txs)
        {
            @tx <br />

        }
        </pre>
    <div>
        <button class="btn btn-primary" @onclick="Return">Return</button>
    </div>
    }
}
else if (walletState.Value.IsOpening && walletState.Value.stage == UIStage.FreeToken)
{
    <h3>Verify and get free LYR</h3>
    <hr />
    <div>
            <p>Current balance of faucet account: <em>@walletState.Value.faucetBalance</em> LYR</p>
    </div>

    <div class="section">
        <ReCAPTCHA @ref="reCAPTCHAComponent" SiteKey="6Lftd8gZAAAAAK5G9aHUFY7wtV1yocfAf2Vj-EmI" OnSuccess="OnSuccess" OnExpired="OnExpired" />
    </div>

    <div class="section">
        <button class="btn btn-extra" @onclick="OnClickPost" disabled="@walletState.Value.DisablePostButton">
            Send me Token!
        </button>
        &nbsp;&nbsp;
        <button class="btn btn-primary" @onclick="Return">Return</button>
    </div>
}
else if (walletState.Value.stage == UIStage.Entry)
{
    <div>
    <button class="btn btn-primary" @onclick="CreateWallet">
        Create New Wallet
    </button>
    </div>
    <hr />
    <div>
        <p>Private Key:</p>
        <p><input size="100" type="text" @bind="prvKey" /></p>
        <p><input type="checkbox" @bind="selfVote" id="chkVote" />&nbsp;<label for="chkVote">Self Vote</label></p>
        <p><button class="btn btn-primary" @onclick="RestoreWallet">
            Restore Wallet
        </button></p>
    </div>

}

@code {

    private ReCAPTCHA reCAPTCHAComponent;

    private void OnSuccess()
    {
        Dispatcher.Dispatch(new WebWalletReCAPTCHAValidAction{ValidReCAPTCHA = true});
    }

    private void OnExpired()
    {
        Dispatcher.Dispatch(new WebWalletReCAPTCHAValidAction{ValidReCAPTCHA = false});
    }

    private async Task OnClickPost()
    {
        if (walletState.Value.ValidReCAPTCHA)
        {
            var response = await reCAPTCHAComponent.GetResponseAsync();
            try
            {
                Dispatcher.Dispatch(new WebWalletReCAPTCHAServerAction{ServerVerificatiing = true});

                var result = await SampleAPI.Post(response);
                if (result.Success)
                {
                    Dispatcher.Dispatch(new WebWalletSendMeFreeTokenAction { 
                        wallet = walletState.Value.wallet,
                        faucetPvk = Configuration["faucetPvk"]
                    });
                    //Navigation.NavigateTo("/valid");
                }
                else
                {
                    await JS.InvokeAsync<object>("alert", string.Join(", ", result.ErrorCodes));
                    
                    Dispatcher.Dispatch(new WebWalletReCAPTCHAServerAction{ServerVerificatiing = false});
                }
            }
            catch (HttpRequestException e)
            {
                await JS.InvokeAsync<object>("alert", e.Message);

                Dispatcher.Dispatch(new WebWalletReCAPTCHAServerAction{ServerVerificatiing = false});
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var key = Configuration["network"] + "freelyr";
        if(walletState.Value.freeTokenTimes.HasValue)
        {
            // if it need save
            var oldValue = await localStore.GetItemAsync<string>(key);
            int oldCount;
            if(oldValue == null || (int.TryParse(oldValue, out oldCount) && oldCount < walletState.Value.freeTokenTimes))
            {
                await localStore.SetItemAsync(key, walletState.Value.freeTokenTimes.ToString());
            }
        }
        else
        {
            var oldValue = await localStore.GetItemAsync<string>(key);
            int oldCount;
            if(oldValue != null && int.TryParse(oldValue, out oldCount))
            {
                walletState.Value.freeTokenTimes = oldCount;
            }
            else
            {
                walletState.Value.freeTokenTimes = 0;
            }
        }
    }
}
